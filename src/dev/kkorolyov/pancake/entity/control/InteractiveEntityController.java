package dev.kkorolyov.pancake.entity.control;

import java.io.PrintWriter;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import dev.kkorolyov.pancake.entity.Entity;
import dev.kkorolyov.simplelogs.Logger;
import dev.kkorolyov.simplelogs.Logger.Level;
import javafx.scene.Scene;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseButton;

/**
 * An entity controller which responds to keyboard and mouse input.
 */
public class InteractiveEntityController implements EntityController {
	private static final Logger log = Logger.getLogger(InteractiveEntityController.class.getName(), Level.DEBUG, new PrintWriter(System.err));	// TODO Temp
	
	private final Map<Enum<?>, Action> actionMap = new HashMap<>();	// Enum to support both KeyCode and MouseButton 
	private final Set<Action> actions = new HashSet<>();
	
	/**
	 * Constructs a new controller which receives input from key and mouse button events generated by a {@code Scene}.
	 * @param scene scene sending inputs
	 */
	public InteractiveEntityController(Scene scene) {
		scene.setOnKeyPressed((e) -> {
			KeyCode code = e.getCode();
			if (actionMap.containsKey(code)) {	// Skip unmapped keys
				actions.add(actionMap.get(code));
				log.debug("Key pressed: " + code);
			}
		});
		scene.setOnKeyReleased((e) -> {
			KeyCode code = e.getCode();
			if (actionMap.containsKey(code)) {
				actions.remove(actionMap.get(code));
				log.debug("Key released: " + code);
			}
		});
		scene.setOnMousePressed((e) -> {
			MouseButton code = e.getButton();
			if (actionMap.containsKey(code)) {
				actions.add(actionMap.get(code));
				log.debug("Mouse pressed: " + code);
			}
		});
		scene.setOnMouseReleased((e) -> {
			MouseButton code = e.getButton();
			if (actionMap.containsKey(code)) {
				actions.remove(actionMap.get(code));
				log.debug("Mouse released: " + code);
			}
		});
	}
	
	/**
	 * Adds a key-action mapping.
	 * @param key pressed key
	 * @param action action mapped to key press
	 */
	public void addAction(KeyCode key, Action action) {
		actionMap.put(key, action);
	}
	/**
	 * Adds a mouse button-action mapping.
	 * @param button pressed button
	 * @param action action mapped to button press
	 */
	public void addAction(MouseButton button, Action action) {
		actionMap.put(button, action);
	}
	
	@Override
	public void update(Entity entity) {
		for (Action action : actions)
			action.execute(entity);
	}
}
