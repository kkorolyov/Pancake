@startuml

class Config {
	{static} -CONFIG_DEFAULT_PROPS: String
	{static} -CONFIG_PROPS: String
	{static} -LOG_PROPS: String
	..
	{static} +config: Properties
	__
	{static} +reloadConfig()
	{static} +reloadLogging()
	..
	{static} +getLogger(c: Class<?>): Logger
}
Config --> dev.kkorolyov.simpleprops.Properties
Config --> dev.kkorolyov.simplelogs.Logger

class Resources {
	{static} -IN_STRATEGIES: InStrategy[]
	{static} -OUT_STRATEGIES: OutStrategy[]
	__
	{static} +in(path: String): InputStream
	{static} +in(path: String, streamConsumer: Consumer<InputStream>): boolean
	..
	{static} +out(path: String): OutputStream
	{static} +out(path: String, streamConsumer: Consumer<OutputStream>): boolean
	..
	{static} +string(path: String): String
	{static} +string(path: String, s: String)
	..
	{static} +providers(providerType: Class<T>, parameters: [Object]): [T]
	{static} -instantiate(name: String, parameters: [Object]): Object
	..
	{static} -logRetrieval(streamType: String, path: String, stream: T): T
	{static} -logRetrieval(streamType: String, path: String, success: boolean): boolean
}

abstract class Launcher {
	#Launcher(LauncherConfig)
	--
	{abstract} #init()
	..
	+start(primaryStage: Stage)
	-setSize(width: float, height: float)
	..
	-announce(object: T, event: String): T
}
Launcher -u-|> javafx.application.Application
Launcher o-- javafx.scene.canvas.Canvas
Launcher o-- javafx.scene.Scene
Launcher o-- dev.kkorolyov.pancake.platform.media.Camera
Launcher o-- dev.kkorolyov.pancake.platform.media.ImageRegistry
Launcher o-- dev.kkorolyov.pancake.platform.media.SoundRegistry
Launcher o-- dev.kkorolyov.pancake.platform.action.ActionRegistry
Launcher o-- dev.kkorolyov.pancake.platform.event.EventBroadcaster
Launcher o-- dev.kkorolyov.pancake.platform.entity.EntityPool
Launcher o-l- GameEngine
Launcher o-l- GameLoop
Launcher +- LauncherConfig
class LauncherConfig {
	-title: String
	-size: Vector
	-unitPixels: Vector
}

@enduml
