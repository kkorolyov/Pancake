package dev.kkorolyov.pancake.component.control;

import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Set;
import java.util.function.Consumer;

import dev.kkorolyov.pancake.core.Entity;
import dev.kkorolyov.pancake.input.KeyAction;
import javafx.scene.Scene;

/**
 * An entity controller which responds to keyboard and mouse input.
 */
public class InteractiveEntityController implements EntityController {
	private final Set<KeyAction> keyActions = new LinkedHashSet<>();
	private final Set<Enum<?>> pressedKeys = new HashSet<>();
	
	/**
	 * Constructs a new controller which receives input from key and mouse button events generated by a {@code Scene}.
	 * @param scene scene sending inputs
	 * @param keyActions actions to listen for
	 */
	public InteractiveEntityController(Scene scene, KeyAction... keyActions) {
		scene.setOnKeyPressed(e -> pressedKeys.add(e.getCode()));
		scene.setOnKeyReleased(e -> pressedKeys.remove(e.getCode()));
		scene.setOnMousePressed((e) -> pressedKeys.add(e.getButton()));
		scene.setOnMouseReleased((e) -> pressedKeys.remove(e.getButton()));

		setActions(keyActions);
	}

	/**
	 * Clears previous actions and sets new actions.
	 * @param keyActions actions to listen for
	 */
	public void setActions(KeyAction... keyActions) {
		this.keyActions.clear();

		if (keyActions != null) this.keyActions.addAll(Arrays.asList(keyActions));
	}
	
	@Override
	public void update(Entity entity, float dt) {
		for (KeyAction keyAction : keyActions) {
			Consumer<? super Entity> action = keyAction.activate(pressedKeys, dt);
			if (action != null) action.accept(entity);
		}
	}
}
