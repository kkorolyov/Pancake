@startuml

package platform {
	class GameLoop {
		handle(long)
	}

	class GameEngine {
		update(long)
	}

	abstract class GameSystem {
		update(Entity, long)
	}

	class Limiter {
		boolean isReady(long)
	}

	class PerformanceCounter {
		start()
		end(GameSystem)
	}

	class Config

	abstract class Launcher {
		start(Stage)
	}

	package action {
		class ActionRegistry

		abstract class Action
		class CollectiveAction
		class FreeFormAction
		class KeyAction
		class MultiStageAction

		ActionRegistry o-- "*" Action

		Action <|-- CollectiveAction
		Action <|-- FreeFormAction
		Action <|-- KeyAction
		Action <|-- MultiStageAction

		CollectiveAction o-- "*" Action
		KeyAction o-- "1" MultiStageAction
		MultiStageAction o-- "1..3" Action
	}

	package event {
  	class EventBroadcaster {
  		register(String, Consumer<?>)
  		enqueue(String, Object)
  		int broadcast()
  	}
  }

  package entity {
  	class Entity
  	class EntityPool

  	class Signature {
  		boolean masks(Signature)
  	}

  	class Component

  	Entity o-- "1" Signature
  	Entity *-- "*" Component

  	EntityPool *-- "*" Entity

  	Signature --> Signature: masks
  }

  package media {
  	class Camera {
  		Vector getAbsolutePosition(Vector)
			Vector getRelativePosition(Vector)
  	}

  	class CompositeImage

  	class ImagePool {
  		put(Properties)
		}

		class SoundPool {
			put(Properties)
		}

  	ImagePool o-- "*" CompositeImage
  }

  package math {
	  class Vector

	  class WeightedDistribution

	  class Collider {
	  	{static} Vector intersection(Vector, Vector, Vector, Vector)
			{static} Vector intersection(Vector, float, Vector, float)
			{static} Vector intersection(Vector, Vector, Vector, float)
			{static} void elasticCollide(Vector, Vector, float, Vector, Vector, float)
	  }
  }

  package storage {
  	abstract class Storable<T extends Storable> {
  		~ int changed(StorableChangeEvent)
			T register(StorableListener)
			T copy()
  	}
  	interface StorableListener

		class storage.Entity
		class storage.Component
		class storage.Attribute

		package serialization {
			interface Serializer<I, O> {
				I read(O)
				O write(I)
				boolean accepts(O)
			}
			abstract class StringSerializer<I>
			class StringSerializers

			Serializer <|.. StringSerializer

			StringSerializers o-- "*" StringSerializer

			package string {
				package string.action {
					StringSerializer <|-- ActionContainerStringSerializer
					StringSerializer <|-- CollectiveActionStringSerializer
					StringSerializer <|-- KeyActionStringSerializer
					StringSerializer <|-- MultiStageActionStringSerializer
					StringSerializer <|-- RegisteredActionStringSerializer

					CollectiveActionStringSerializer --> CollectiveAction: serializes
					KeyActionStringSerializer --> KeyAction: serializes
					MultiStageActionStringSerializer --> MultiStageAction: serializes
					RegisteredActionStringSerializer --> Action: serializes
				}

				StringSerializer <|-- EntityStringSerializer
				StringSerializer <|-- ComponentStringSerializer
				StringSerializer <|-- AttributeStringSerializer
				StringSerializer <|-- MapStringSerializer
				StringSerializer <|-- NumberStringSerializer
				StringSerializer <|-- StringStringSerializer
				StringSerializer <|-- URIStringSerializer

				EntityStringSerializer --> storage.Entity: serializes
				ComponentStringSerializer --> storage.Component: serializes
				AttributeStringSerializer --> storage.Attribute: serializes
			}
		}

		Storable ..|> Serializable
		Storable o-- "*" StorableListener
		Storable <|-- storage.Entity
		Storable <|-- storage.Component
		Storable <|-- storage.Attribute

		storage.Entity o-- "*" storage.Component
		storage.Component o-- "*" storage.Attribute
  }

	Action --> Entity: alters
	Entity o-- "*" Action

  GameLoop *-- "1" GameEngine

  GameEngine *-- "1" EventBroadcaster
  GameEngine *-- "1" EntityPool
	GameEngine *-- "*" GameSystem

	GameEngine --> GameSystem: updates
	GameEngine --> PerformanceCounter: queries

	GameSystem --> Signature: filters by
	GameSystem --> Entity: updates

	Limiter --> GameSystem: limits

	PerformanceCounter --> GameSystem: times

	Launcher --> GameLoop: initializes
}

@enduml
