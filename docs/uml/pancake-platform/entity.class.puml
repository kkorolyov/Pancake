@startuml

interface Component

class Entity {
	-id: int
	-signature: Signature
	..
	-components: {Class<? extends Component>, Component}
	-actions: [Action]
	__
	+Entity(id: int, components: [Component])
	--
	+contains(Signature): boolean
	+matches(Signature): boolean
	..
	+get(type: Class<T extends Component>): T
	+get(type: Class<T extends Component>, Consumer<? super T>): boolean
	+add(Component): boolean
	+remove(type: Class<T extends Component>): boolean
	..
	+add(Action): Entity
	+applyActions(): int
	..
	+streamComponents(): Stream<Component>
}
Entity .u.|> Comparable
Entity o-- Signature
Entity o-l- Component
Entity o- dev.kkorolyov.pancake.platform.action.Action

class EntityPool {
	-idCounter: int
	-reclaimedIds: Queue<Integer>
	-entities: {Integer, Entity}
	-events: EventBroadcaster
	__
	+EntityPool(events: EventBroadcaster)
	--
	+applyActions()
	..
	+get(id: int): Entity
	+get(Signature, Comparator<Entity>): Stream<Entity>
	..
	+create([Component]): Entity
	+destroy(Entity): boolean
}
EntityPool o-- Entity
EntityPool --> Component
EntityPool --> Signature
EntityPool o- dev.kkorolyov.pancake.platform.event.EventBroadcaster

class Signature {
	{static} -masks: {Class<? extends Component>, Long}
	{static} -indexCounter: long
	__
	+Signature([Class<? extends Component])
	--
	{static} -maskOf(Class<? extends Component>): long
	..
	+masks(other: Signature): boolean
	..
	+add(Class<? extends Component>)
	+remove(Class<? extends Component>)
}

@enduml
