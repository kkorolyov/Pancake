@startuml

interface Component

class Signature {
	{static} -indexMap: {Class<? extends Component>, Long}
	{static} -indexCounter: long
	..
	-types: {Class<? extends Component?}
	-signature: long
	__
	+Signature([Class<? extends Component])
	--
	{static} -maskOf(Class<? extends Component>): long
	..
	+masks(other: Signature): boolean
	..
	+add(Class<? extends Component>)
	+remove(Class<? extends Component>)
	..
	+size(): int
	+getTypes(): {Class<? extends Component>}
}
Signature .u.|> Comparable

interface EntityPool {
	+contains(id: int, Signature): boolean
	..
	+get(id: int): Stream<Component>
	..
	+get(id: int, type: Class<T extends Component>): T
	+get(id: int, type: Class<T extends Component>, Function<T, R>): R
	..
	+add(id: int, Action)
}
EntityPool -u-> Component
EntityPool -l-> Signature
EntityPool -r-> dev.kkorolyov.pancake.platform.action.Action

class ManagedEntityPool {
	-components: {Class<? extends Component, {Integer, Component}}
	-actions: {Integer, [Action]}
	-events: EventBroadcaster
	..
	-counter: int
	-reclaimedIds: Queue<Integer>
	__
	+ManagedEntityPool(events: EventBroadcaster)
	--
	+forEachMatching(Signature, action: Consumer<Integer>)
	..
	+create([Component]): int
	+destroy(id: int): long
	..
	+add(id: int, Component)
	+remove(id: int, type: Class<? extends Component>)
	..
	-getComponentMap(Class<? extends Component>): {Integer, Component}
	..
	+add(id: int, Action)
	+applyActions()
}
ManagedEntityPool .u.|> EntityPool
ManagedEntityPool o- dev.kkorolyov.pancake.platform.event.EventBroadcaster

@enduml
