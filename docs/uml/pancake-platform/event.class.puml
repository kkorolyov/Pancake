@startuml

interface Event
Event <|.. CameraCreated
Event <|..CanvasCreated
Event <|.. SceneCreated
Event <|.. CreateEntity
Event <|.. DestroyEntity
Event <|.. EntityCreated
Event <|.. EntityDestroyed

class CameraCreated {
	-Camera
}
class CanvasCreated {
	-Canvas
}
class SceneCreated {
	-Scene
}
class CreateEntity {
	-components: [Component]
}
class DestroyEntity {
	-id: int
}
class EntityCreated {
	-id: int
}
class EntityDestroyed {
	-id: int
}

interface EventBroadcaster {
	+register(type: Class<E extends Event>, receiver: Consumer<? super E>)
	+unregister(type: Class<E extends Event>, receiver: Consumer<? super E>)
	..
	+enqueue(Event): int
}
EventBroadcaster o- Event

class ManagedEventBroadcaster {
	-receivers: {Class<? extends Event>, {Consumer<?>}}
	-eventQueue: Queue<Event>
	__
	+broadcast(): int
}
ManagedEventBroadcaster .u.|> EventBroadcaster

@enduml
