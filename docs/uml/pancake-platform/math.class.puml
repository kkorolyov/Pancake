@startuml

class Collider {
	{static} -mtv: Vector
	..
	{static} -xTemp1: Vector
	{static} -xTemp2: Vector
	{static} -vTemp: Vector
	{static} -vDiff: Vector
	{static} -XDiff: Vector
	__
	{static} +intersection(origin1: Vector, size1: Vector, origin2: Vector, size2: Vector): Vector
	{static} -overlap(x1: float, x2: float, y1: float, y2: float): float
	{static} +intersection(origin1: Vector, radius1: float, origin2: Vector, radius2: float): Vector
	{static} +intersection(origin1: Vector, size1: Vector, origin2: Vector, radius2: float): Vector
	..
	{static} +elasticCollide(origin1: Vector, velocity1: Vector, mass1: float, origin2: Vector, velocity2: Vector, mass2: float)
	{static} -applyElastic(origin1: Vector, velocity1: Vector, mass1: float, origin2: Vector, velocity2: Vector, mass2: float)
}
Collider --> Vector

class Vector {
	-x: float
	-y: float
	-z: float
	__
	+Vector()
	+Vector(x, y)
	+Vector(x, y, z)
	+Vector(original: Vector)
	--
	+translate(dx: float, dy: float)
	+translate(dx: float, dy: float, dz: float)
	..
	+scale(value: float)
	+scale(other: Vector)
	+invScale(other: Vector)
	..
	{static} +add([Vector]): Vector
	{static} +sub([Vector]): Vector
	..
	+add(other: Vector)
	+add(other: Vector, scale: float)
	+sub(other: Vector)
	+sub(other: Vector, scale: float)
	..
	+dot(other: Vector): float
	+project(other: Vector): Vector
	..
	+distance(other: Vector): float
	+angle(other: Vector): float
	..
	+normalize(other: Vector)
	..
	+getMagnitude(): float
	+getDirection(): Vector
	..
	+getTheta(): float
	+getPhi(): float
	..
	+set(x: float, y: float)
	+set(x: float,  y: float, z: float)
	+set(match: Vector)
}

class WeightedDistribution<T> {
	-distribution: {Integer, T}
	-total: int
	-rand: Random
	__
	+add(weight: int, value: T): WeightedDistribution<T>
	+get(): T
}

@enduml
